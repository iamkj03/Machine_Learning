#refered to keras github example
import os
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
import numpy
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
import keras

#initial setting
batch_size = 32
num_classes = 2
epochs = 100
data_augmentation = True
num_predictions = 20
save_dir = os.path.join(os.getcwd(), 'saved_models')
model_name = 'keras_cifar10_trained_model_256.h5'

accuracy_data = []
sum = 0
#trying 10 times for accuracy of this model
for p in range(10):
    print('')
    print(p, 'th time')
    #for shuffling and splitting data
    seed = 7
    numpy.random.seed(seed)

    # Read images and label images
    manFolder = 'imgdata/32data/man'
    womanFolder = 'imgdata/32data/woman'
    label = []

    rawdata = [image.img_to_array(image.load_img(os.path.join(manFolder, img), target_size=(256, 256), grayscale=False)) for img in os.listdir(manFolder)]

    for img in os.listdir(manFolder):
        label = label + [0]

    rawdata = rawdata + [image.img_to_array(image.load_img(os.path.join(womanFolder, img), target_size=(256, 256), grayscale=False)) for img in os.listdir(womanFolder)]

    for img in os.listdir(womanFolder):
        label = label + [1]

    X_train, X_test, Y_train, Y_test = train_test_split(rawdata, label, test_size=0.2, random_state=seed)

    #convert to array
    X_train = numpy.array(X_train)
    X_test = numpy.array(X_test)
    #shape of X train and test
    print('x_train shape:', X_train.shape)
    print(X_train.shape[0], 'train samples')
    print(X_test.shape[0], 'test samples')

    print(rawdata, label)

    # Convert class vectors to binary class matrices.
    Y_train = keras.utils.to_categorical(Y_train, 2)
    Y_test = keras.utils.to_categorical(Y_test, 2)
    print(Y_test)
    model = Sequential()
    model.add(Conv2D(32, (3, 3), padding='same',
                     input_shape=(256,256,3)))
    model.add(Activation('relu'))
    model.add(Conv2D(32, (3, 3)))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Conv2D(64, (3, 3), padding='same'))
    model.add(Activation('relu'))
    model.add(Conv2D(64, (3, 3)))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Flatten())
    model.add(Dense(512))
    model.add(Activation('relu'))
    model.add(Dropout(0.5))
    model.add(Dense(num_classes))
    model.add(Activation('softmax'))

    # initiate RMSprop optimizer
    opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

    # Let's train the model using RMSprop
    model.compile(loss='categorical_crossentropy',
                  optimizer=opt,
                  metrics=['accuracy'])

    X_train = X_train.astype('float32')
    X_test = X_test.astype('float32')
    X_train /= 255
    X_test /= 255

    if not data_augmentation:
        print('Not using data augmentation.')
        model.fit(X_train, Y_train,
                  batch_size=batch_size,
                  epochs=epochs,
                  validation_data=(X_test, Y_test),
                  shuffle=True)
    else:
        print('Using real-time data augmentation.')
        # This will do preprocessing and realtime data augmentation:
        datagen = ImageDataGenerator(
            featurewise_center=False,  # set input mean to 0 over the dataset
            samplewise_center=False,  # set each sample mean to 0
            featurewise_std_normalization=False,  # divide inputs by std of the dataset
            samplewise_std_normalization=False,  # divide each input by its std
            zca_whitening=False,  # apply ZCA whitening
            rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
            width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
            height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
            horizontal_flip=True,  # randomly flip images
            vertical_flip=False)  # randomly flip images

        # Compute quantities required for feature-wise normalization
        # (std, mean, and principal components if ZCA whitening is applied).
        datagen.fit(X_train)

        # Fit the model on the batches generated by datagen.flow().
        model.fit_generator(datagen.flow(X_train, Y_train,
                                         batch_size=batch_size),
                            epochs=epochs,
                            validation_data=(X_test, Y_test),
                            workers=4)

    # Save model and weights
    if not os.path.isdir(save_dir):
        os.makedirs(save_dir)
    model_path = os.path.join(save_dir, model_name)
    model.save(model_path)
    print('Saved trained model at %s ' % model_path)

    # Score trained model.
    scores = model.evaluate(X_test, Y_test, verbose=1)
    print('Test loss:', scores[0])
    print('Test accuracy:', scores[1])

    accuracy_data = accuracy_data + [scores[1]]

#average of total accuracy of 10
for i in accuracy_data:
    sum = sum + i

average = sum / len(accuracy_data)

print (accuracy_data)
print (average)